<script>
    import P5 from "p5";
    import opentype from "opentype.js";
    import { Pane } from "tweakpane";

    const container = document.querySelector(".p5") as HTMLElement;
    const PARAMS = {
        rows: 20,
        cols: 20,
        noiseSpeed: 1,
        noiseValue: 0.05,
        noiseMultipyer: 2,
        string: "TH",
        debug: true,
        size: 600,
        fps: 60,
    };

    const pane = new Pane({
        title: "Parameters",
        expanded: false,
    });
    pane.addBinding(PARAMS, "string");
    pane.addBinding(PARAMS, "size", { min: 0, max: 1000 });
    pane.addBinding(PARAMS, "rows", { min: 1, max: 100 });
    pane.addBinding(PARAMS, "cols", { min: 1, max: 100 });
    pane.addBinding(PARAMS, "noiseSpeed", { min: 1, max: 10 });
    pane.addBinding(PARAMS, "noiseValue", { min: 0.01, max: 0.1 });
    pane.addBinding(PARAMS, "noiseMultipyer", { min: 0.01, max: 5 });
    pane.addBinding(PARAMS, "debug");
    pane.addBinding(PARAMS, "fps", {
        view: "graph",
        min: 0,
        max: 100,
    });
    const sketch = (p5: P5) => {
        let width,
            height,
            pg,
            fontData,
            font,
            paths,
            textW,
            textH = 0,
            traslate,
            noiseGrid = [],
            rowVal = [],
            colVal = [];

        p5.preload = () => {
            fontData = p5.loadBytes("/fonts/thunder.ttf");
        };

        p5.setup = async () => {
            width = container.clientWidth;
            height = container.clientHeight;
            p5.createCanvas(width, height);
            pg = p5.createGraphics(width, height);
            container.style.opacity = "1";

            font = opentype.parse(fontData.bytes.buffer);
            paths = font.getPaths(PARAMS.string, 0, 0, PARAMS.size);
            textW = font.getAdvanceWidth(PARAMS.string, PARAMS.size);
            textH = 0;
            for (const path of paths) {
                const h = Math.abs(
                    path.getBoundingBox().y1 - path.getBoundingBox().y2,
                );
                if (h > textH) textH = h;
            }
            traslate = {
                x: (width - textW) / 2,
                y: (height - textH) / 2 + textH,
            };

            noiseGrid = [];
            for (const path of paths) {
                for (const c of path.commands) {
                    c.row = +(
                        (c.x + traslate.x) /
                        (width / PARAMS.cols)
                    ).toFixed();
                    c.row1 = +(
                        (c.x1 + traslate.x) /
                        (width / PARAMS.cols)
                    ).toFixed();
                    c.row2 = +(
                        (c.x2 + traslate.x) /
                        (width / PARAMS.cols)
                    ).toFixed();
                    c.col = +(
                        (c.y + traslate.y) /
                        (height / PARAMS.rows)
                    ).toFixed();
                    c.col1 = +(
                        (c.y1 + traslate.y) /
                        (height / PARAMS.rows)
                    ).toFixed();
                    c.col2 = +(
                        (c.y2 + traslate.y) /
                        (height / PARAMS.rows)
                    ).toFixed();
                }
            }

            colVal = [];
            rowVal = [];
            for (let i = 0; i < PARAMS.cols; i++) {
                colVal.push({
                    index: i,
                    noise: 0,
                    value: (width / PARAMS.cols) * i,
                    diff: 0,
                });
            }
            for (let j = 0; j < PARAMS.rows; j++) {
                rowVal.push({
                    index: j,
                    noise: 0,
                    value: (height / PARAMS.rows) * j,
                    diff: 0,
                });
            }

            p5.stroke("red");
            p5.strokeWeight(1);
        };

        p5.draw = () => {
            PARAMS.fps = p5.frameRate();

            p5.background(0);
            pg.clear();

            let colNoiseSum = 0,
                colY = 0;
            for (const el of colVal) {
                let noise = p5.noise(
                    el.index * PARAMS.noiseValue,
                    p5.frameCount * PARAMS.noiseSpeed * 0.005,
                );
                noise = Math.pow(noise, PARAMS.noiseMultipyer);
                el.noise = noise;
                colNoiseSum += noise;
            }
            for (const el of colVal) {
                let v = width * (el.noise / colNoiseSum);
                const value = colY + v;
                el.difference = el.value - value;
                el.value = value;
                colY += v;
            }

            let rowNoiseSum = 0,
                rowY = 0;
            for (const el of rowVal) {
                let noise = p5.noise(
                    el.index * PARAMS.noiseValue + PARAMS.rows,
                    p5.frameCount * PARAMS.noiseSpeed * 0.005,
                );
                noise = Math.pow(noise, PARAMS.noiseMultipyer);
                el.noise = noise;
                rowNoiseSum += noise;
            }
            for (const el of rowVal) {
                let v = height * (el.noise / rowNoiseSum);
                const value = rowY + v;
                el.difference = el.value - value;
                el.value = value;
                rowY += v;
            }
            if (PARAMS.debug) {
                for (const el of rowVal) {
                    p5.line(0, el.value, width, el.value);
                }
                for (const el of colVal) {
                    p5.line(el.value, 0, el.value, height);
                }
            }

            // drawText
            pg.push();
            pg.translate(traslate.x, traslate.y);
            for (const path of paths) {
                pg.beginShape();
                let shapes = 0;
                for (const c of path.commands) {
                    if (c.row) c.x -= colVal[c.row]?.difference;
                    if (c.row1) c.x1 -= colVal[c.row1]?.difference;
                    if (c.row2) c.x2 -= colVal[c.row2]?.difference;
                    if (c.col) c.y -= rowVal[c.col]?.difference;
                    if (c.col1) c.y1 -= rowVal[c.col1]?.difference;
                    if (c.col2) c.y2 -= rowVal[c.col2].difference;

                    switch (c.type) {
                        case "M":
                            if (shapes > 0) {
                                pg.beginContour();
                            }
                            pg.vertex(c.x, c.y);
                            break;
                        case "Z":
                            if (shapes > 0) {
                                pg.endContour();
                            }
                            shapes++;
                            break;
                        case "L":
                            pg.vertex(c.x, c.y);
                            break;
                        case "Q":
                            pg.quadraticVertex(c.x1, c.y1, c.x, c.y);
                            break;
                        case "C":
                            pg.bezierVertex(c.x1, c.y1, c.x2, c.y2, c.x, c.y);
                            break;
                    }
                }
                pg.endShape();
            }
            pg.pop();
            p5.image(pg, 0, 0);
        };
        p5.windowResized = () => {
            if (container.clientWidth !== width) p5.setup();
        };
        pane.on("change", (c) => {
            p5.setup();
        });
    };
    new P5(sketch, container);
</script>
<div class="p5"></div>
