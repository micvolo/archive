<script>
    import P5 from "p5";
    import opentype from "opentype.js";
    import { Pane } from "tweakpane";

    const container = document.querySelector(".p5") as HTMLElement;
    const PARAMS = {
        rows: 20,
        cols: 20,
        noiseSpeed: 1,
        noiseValue: 0.05,
        noiseMultipyer: 2,
        string: "TH",
        size: 600,
        fps: 60,
    };

    const pane = new Pane({
        title: "Parameters",
        expanded: false,
    });
    pane.addBinding(PARAMS, "string");
    pane.addBinding(PARAMS, "size", { min: 0, max: 1000 });
    pane.addBinding(PARAMS, "rows", { min: 1, max: 100 });
    pane.addBinding(PARAMS, "cols", { min: 1, max: 100 });
    pane.addBinding(PARAMS, "noiseSpeed", { min: 1, max: 10 });
    pane.addBinding(PARAMS, "noiseValue", { min: 0.01, max: 0.1 });
    pane.addBinding(PARAMS, "noiseMultipyer", { min: 0.01, max: 5 });
    pane.addBinding(PARAMS, "fps", {
        view: "graph",
        min: 0,
        max: 100,
    });
    const sketch = (p5: P5) => {
        let width,
            height,
            pg,
            fontData,
            font,
            paths,
            textW,
            textH = 0,
            traslate,
            noiseGrid = [];

        p5.preload = () => {
            fontData = p5.loadBytes("/fonts/thunder.ttf");
        };

        p5.setup = async () => {
            width = container.clientWidth;
            height = container.clientHeight;
            p5.createCanvas(width, height);
            pg = p5.createGraphics(width, height);
            container.style.opacity = "1";

            font = opentype.parse(fontData.bytes.buffer);
            paths = font.getPaths(PARAMS.string, 0, 0, PARAMS.size);
            textW = font.getAdvanceWidth(PARAMS.string, PARAMS.size);
            textH = 0;
            for (const path of paths) {
                const h = Math.abs(
                    path.getBoundingBox().y1 - path.getBoundingBox().y2,
                );
                if (h > textH) textH = h;
            }
            traslate = {
                x: (width - textW) / 2,
                y: (height - textH) / 2 + textH,
            };

            noiseGrid = [];
            for (const path of paths) {
                for (const c of path.commands) {
                    c.startX = c.x;
                    c.startX1 = c.x1;
                    c.startX2 = c.x2;
                    c.rowx1 = +(
                        (c.x + traslate.x) /
                        (width / PARAMS.cols)
                    ).toFixed();

                    c.startY = c.y;
                    c.startY1 = c.y1;
                    c.startY2 = c.y2;
                    c.colx1 = +(
                        (c.y + traslate.y) /
                        (height / PARAMS.rows)
                    ).toFixed();
                }
            }
        };

        p5.draw = () => {
            PARAMS.fps = p5.frameRate();
            p5.background(0);
            pg.clear();
            p5.stroke("red");
            p5.strokeWeight(1);

            // calculateNoise
            noiseGrid = [];
            let noiseRow = [];
            for (let i = 0; i < PARAMS.cols; i++) {
                let noise = p5.noise(
                    i * PARAMS.noiseValue,
                    p5.frameCount * PARAMS.noiseSpeed * 0.005,
                );
                noise = Math.pow(noise, PARAMS.noiseMultipyer);
                noiseRow.push(noise);
            }
            noiseGrid.push(noiseRow);
            noiseRow = [];
            for (let j = 0; j < PARAMS.rows; j++) {
                let noise = p5.noise(
                    j * PARAMS.noiseValue + PARAMS.cols,
                    p5.frameCount * PARAMS.noiseSpeed * 0.005,
                );
                noise = Math.pow(noise, PARAMS.noiseMultipyer);
                noiseRow.push(noise);
            }
            noiseGrid.push(noiseRow);

            // sumNoise
            const noiseSumx = noiseGrid[0].reduce((a, b) => a + b, 0);
            const noiseSumy = noiseGrid[1].reduce((a, b) => a + b, 0);

            // drawLines
            p5.push();
            for (const [i, noiseRow] of noiseGrid[0].entries()) {
                let v = width * (noiseRow / noiseSumx);
                p5.translate(v, 0);
                p5.line(0, 0, 0, height);
            }
            p5.pop();
            p5.push();
            for (const [i, noiseRow] of noiseGrid[1].entries()) {
                let v = height * (noiseRow / noiseSumy);
                p5.translate(0, v);
                p5.line(0, 0, width, 0);
            }
            p5.pop();

            // drawText
            pg.push();
            pg.translate(traslate.x, traslate.y);
            for (const path of paths) {
                pg.beginShape();
                let shapes = 0;
                for (const c of path.commands) {
                    let n = noiseGrid[0][c.row];
                    let n1 = noiseGrid[1][c.col];
                    c.x = c.startX + n;
                    c.x1 = c.startX1 + n;
                    c.x2 = c.startX2 + n;
                    c.y = c.startY + n1;
                    c.y1 = c.startY1 + n1;
                    c.y2 = c.startY2 + n1;
                    switch (c.type) {
                        case "M":
                            if (shapes > 0) {
                                pg.beginContour();
                            }
                            pg.vertex(c.x, c.y);
                            break;
                        case "Z":
                            if (shapes > 0) {
                                pg.endContour();
                            }
                            shapes++;
                            break;
                        case "L":
                            pg.vertex(c.x, c.y);
                            break;
                        case "Q":
                            pg.quadraticVertex(c.x1, c.y1, c.x, c.y);
                            break;
                        case "C":
                            pg.bezierVertex(c.x1, c.y1, c.x2, c.y2, c.x, c.y);
                            break;
                    }
                }
                pg.endShape();
            }
            pg.pop();
            p5.image(pg, 0, 0);
        };
        p5.windowResized = () => {
            if (container.clientWidth !== width) p5.setup();
        };
        pane.on("change", (c) => {
            p5.setup();
        });
    };
    new P5(sketch, container);
</script>
<div class="p5"></div>
