<script>
    import P5 from "p5";
    import { Pane } from "tweakpane";

    const container = document.querySelector(".p5") as HTMLElement;
    const sketch = (p5: P5) => {
        const o = {
            sizex: 5,
            sizey: 5,
            elements: [],
            showImage: false,
            webcam: false,
            vertical: false,
            pane: new Pane(),
            startx: 0,
            starty: 0,
            pixelDensity: 5,
        } as any;

        setupPanel();

        p5.preload = () => {
            o.img = p5.loadImage("/projects/a38/1.webp");

            o.elements.push({
                img: p5.loadImage("/projects/a38/mic.png"),
                value: 1,
            });
            o.elements.push({
                img: p5.loadImage("/projects/a38/volo.png"),
                value: 1,
            });
            o.elements.push({
                img: p5.loadImage("/projects/a38/stra.png"),
                value: 1,
            });
            o.elements.push({
                img: p5.loadImage("/projects/a38/dev.png"),
                value: 1,
            });
        };

        p5.setup = () => {
            refreshPanel();

            o.width = container.clientWidth;
            o.height = container.clientHeight;
            o.canvas = p5.createCanvas(o.width, o.height);
            p5.noStroke();
            p5.pixelDensity(o.pixelDensity);
            p5.noSmooth();
            if (o.webcam) {
                o.img = p5.createCapture("video");
                o.img.elt.setAttribute("playsinline", "");
                o.img.hide();
                o.img.flipped = true;
                resize();
                p5.loop();
            } else {
                if (o.img.remove) o.img.remove();
                resize();
                p5.draw();
                p5.noLoop();
            }
        };
        p5.draw = () => {
            // @ts-ignore
            p5.clear();
            if (o.showImage) p5.image(o.img, o.startx, o.starty);
            getData();
            draw();
        };
        function resize() {
            const hratio = o.width / o.img.width;
            const wratio = o.height / o.img.height;
            var r = Math.min(hratio, wratio);
            o.startx = o.width / 2 - (o.img.width / 2) * r;
            o.starty = o.height / 2 - (o.img.height / 2) * r;
            if (o.img.resize) {
                o.img.resize(o.img.width * r, o.img.height * r);
            }
            if (o.img.size) {
                if ("ontouchstart" in document.documentElement) return;
                o.img.size(o.width, (o.width * 480) / 640);
            }
        }

        function getData() {
            o.data = [];
            o.img.loadPixels();

            o.mainside = o.img.width;
            o.secondaryside = o.img.height;
            if (o.vertical) {
                o.mainside = o.img.height;
                o.secondaryside = o.img.width;
            }

            for (let i = 0; i < o.secondaryside; i++) {
                for (let j = 0; j < o.mainside; j++) {
                    let index = (j + i * o.mainside) * 4;

                    if (o.vertical) {
                        index = (i + j * o.secondaryside) * 4;
                    }

                    let r = o.img.pixels[index];
                    let g = o.img.pixels[index + 1];
                    let b = o.img.pixels[index + 2];

                    if (!Number(r)) continue;

                    let bright = 255 - (r * 0.299 + g * 0.587 + b * 0.114);

                    // p5.fill(bright);
                    // p5.rect(j, i, o.sizex, o.sizey);

                    let t = Math.floor(bright / (255 / o.elements.length));
                    if (t > o.elements.length - 1) t = o.elements.length - 1;

                    o.data.push(t);

                    j += o.sizex - 1;
                }
                i += o.sizey - 1;
            }
        }

        function draw() {
            let actual = o.data[0];
            let count = 0;

            for (let i = 0; i < o.data.length; i++) {
                let l = Math.ceil(o.mainside / o.sizex);
                let x = i % l;
                let y = Math.floor(i / l);

                if (o.vertical) {
                    x = Math.floor(i / l);
                    y = i % l;
                }

                let t = o.data[i];

                if (actual === t && x !== l - 1 && y !== l - 1) {
                    count++;
                    continue;
                }

                let posx = (x - count) * o.sizex;
                let posy = y * o.sizey;
                let sizex = o.sizex * (count + 1);
                let sizey = o.sizey;

                if (o.vertical) {
                    posx = x * o.sizey;
                    posy = (y - count) * o.sizex;
                    sizex = o.sizey;
                    sizey = o.sizex * (count + 1);
                }

                p5.image(
                    o.elements[actual].img,
                    posx + o.startx,
                    posy + o.starty,
                    sizex,
                    sizey,
                );

                actual = t;
                count = 0;
            }
        }
        p5.windowResized = () => p5.setup();
        o.pane.on("change", () => p5.setup());

        function setupPanel() {
            o.paneTabs = o.pane.addTab({
                pages: [{ title: "Settings" }, { title: "Parameters" }],
            });

            let t = o.paneTabs.pages[0];
            t.addButton({ title: "Upload Image" }).on("click", () => {
                const input = document.createElement("input");
                input.setAttribute("type", "file");
                input.setAttribute("accept", "image/*");
                input.addEventListener(
                    "input",
                    async () => {
                        const f = input.files[0];
                        await new Promise(
                            (r) =>
                                (o.img = p5.loadImage(
                                    URL.createObjectURL(f),
                                    r,
                                )),
                        );
                        p5.setup();
                    },
                    { once: true },
                );
                input.click();
            });
            t.addBinding(o, "webcam");

            t.addBinding(o, "sizex", { min: 1, max: 20, step: 1 });
            t.addBinding(o, "sizey", { min: 1, max: 20, step: 1 });
            t.addBinding(o, "vertical");
            t.addBinding(o, "showImage");
            t.addButton({ title: "Save" }).on("click", () => {
                let c = o.canvas.get(
                    o.startx,
                    o.starty,
                    o.img.width,
                    o.img.height,
                );
                c.save("image.png");
            });
        }

        function refreshPanel() {
            for (const el of o.paneTabs.pages[1].children) {
                o.paneTabs.pages[1].remove(el);
            }

            for (let [i, el] of o.elements.entries()) {
                let f = o.paneTabs.pages[1].addFolder({
                    title: `Parameter ${i + 1}`,
                    expanded: false,
                });
                f.addButton({ title: `Change Parameter ${i + 1}` }).on(
                    "click",
                    () => {
                        const input = document.createElement("input");
                        input.setAttribute("type", "file");
                        input.setAttribute("accept", "image/*");
                        input.addEventListener(
                            "input",
                            async () => {
                                const f = input.files[0];
                                await new Promise((r) => {
                                    o.elements[i].img = p5.loadImage(
                                        URL.createObjectURL(f),
                                        r,
                                    );
                                });
                                p5.setup();
                            },
                            { once: true },
                        );
                        input.click();
                    },
                );
                f.addButton({ title: `Delete Parameter ${i + 1}` }).on(
                    "click",
                    () => {
                        o.elements.splice(i, 1);
                        p5.setup();
                    },
                );
            }
            o.paneTabs.pages[1].addBlade({
                view: "separator",
            });
            o.paneTabs.pages[1]
                .addButton({ title: "New Parameter" })
                .on("click", () => {
                    const input = document.createElement("input");
                    input.setAttribute("type", "file");
                    input.setAttribute("accept", "image/*");
                    input.addEventListener(
                        "input",
                        async () => {
                            const f = input.files[0];
                            await new Promise((r) => {
                                o.elements.push(
                                    p5.loadImage(URL.createObjectURL(f), r),
                                );
                            });
                            p5.setup();
                        },
                        { once: true },
                    );
                    input.click();
                });
        }
    };
    new P5(sketch, container);
</script>
<div class="p5"></div>
