<script>
    import fragment from "@/shaders/a35/frag.glsl?raw";
    import {
        Renderer,
        Geometry,
        Program,
        Mesh,
        Vec2,
        Vec4,
        Texture,
    } from "ogl";

    // mouse
    const uMouse = new Vec4(-1);
    window.addEventListener("mousemove", ({ clientX, clientY }) =>
        uMouse.set(clientX, clientY, uMouse.z, uMouse.w),
    );
    window.addEventListener("mousedown", ({ clientX, clientY }) =>
        uMouse.set(uMouse.x, uMouse.y, clientX, clientY),
    );
    window.addEventListener("mouseup", () =>
        uMouse.set(uMouse.x, uMouse.y, -1, -1),
    );

    const renderer = new Renderer({
        canvas: document.querySelector(".webgl") as HTMLCanvasElement,
        dpr: 1,
        width: window.innerWidth,
        height: window.innerHeight,
    });
    const gl = renderer.gl;
    document.body.appendChild(gl.canvas);

    function resize() {
        renderer.setSize(window.innerWidth, window.innerHeight);
        program.uniforms.uResolution.value = new Vec2(
            window.innerWidth,
            window.innerHeight,
        );
    }
    window.addEventListener("resize", resize, false);

    // displacement
    const img = document.querySelector(".d") as HTMLImageElement;
    const displacement = new Texture(gl, {
        image: img,
        generateMipmaps: false,
        width: img.width,
        height: img.height,
    });

    // video
    const video = document.querySelector(".video1") as HTMLVideoElement;
    const video2 = document.querySelector(".video2") as HTMLVideoElement;
    video.play();
    video2.play();

    await new Promise((r) => {
        if (video.readyState >= video.HAVE_CURRENT_DATA) return r(true);
        video.addEventListener("loadeddata", () => r(true));

        if (video2.readyState >= video2.HAVE_CURRENT_DATA) return r(true);
        video2.addEventListener("loadeddata", () => r(true));
    });

    const videoTexture = new Texture(gl, {
        image: video,
        generateMipmaps: false,
        width: video.videoWidth,
        height: video.videoHeight,
    });

    const videoTexture2 = new Texture(gl, {
        image: video2,
        generateMipmaps: false,
        width: video2.videoWidth,
        height: video2.videoHeight,
    });

    // Triangle that covers viewport, with UVs that still span 0 > 1 across viewport
    const geometry = new Geometry(gl, {
        position: {
            size: 2,
            data: new Float32Array([-1, -1, 3, -1, -1, 3]),
        },
        uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },
    });
    // Alternatively, you could use the Triangle class.

    const program = new Program(gl, {
        vertex: /* glsl */ `
            attribute vec2 uv;
            attribute vec2 position;

            varying vec2 vUv;

            void main() {
                vUv = uv;
                gl_Position = vec4(position, 0, 1);
            }
        `,
        fragment,
        uniforms: {
            uTime: { value: 0 },
            uMouse: { value: uMouse },
            uVideo: { value: videoTexture },
            uVideo2: { value: videoTexture2 },
            uVideoResolution: {
                value: new Vec2(video.videoWidth, video.videoHeight),
            },
            uVideo2Resolution: {
                value: new Vec2(video2.videoWidth, video2.videoHeight),
            },
            uDisplacement: { value: displacement },
            uResolution: {
                value: new Vec2(window.innerWidth, window.innerHeight),
            },
        },
    });
    const mesh = new Mesh(gl, { geometry, program });

    requestAnimationFrame(update);
    function update(t) {
        requestAnimationFrame(update);

        // video frames
        videoTexture.needsUpdate = true;
        videoTexture2.needsUpdate = true;

        // time
        program.uniforms.uTime.value = t * 0.001;

        // Don't need a camera if camera uniforms aren't required
        renderer.render({ scene: mesh });
    }
</script>
<script src="@/scripts/recorder.ts"></script>
<canvas class="webgl"></canvas>
<video loop muted playsinline src="/projects/a34/vv.mp4" class="video1"></video>
<video loop muted playsinline src="/projects/a34/v.mp4" class="video2"></video>
<img src="/projects/a35/d.webp" class="d" />
<style lang="scss">
    :global(html, body) {
        position: fixed;
        inset: 0;
    }

    .webgl {
        position: fixed;
        inset: 0;
    }

    video {
        display: none;
    }
</style>
