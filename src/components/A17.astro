<script>
    import P5 from "p5";
    import opentype from "opentype.js";

    const container = document.querySelector(".p5") as HTMLElement;
    const PARAMS = {
        diameter: 200,
        string: "STRA",
    };

    const sketch = (p5: P5) => {
        let width,
            height,
            minsize,
            myfont,
            startPressing,
            vectorMovedList = [],
            pg,
            fontData,
            font,
            path,
            glyphs,
            vectors,
            startCursor;

        p5.preload = () => {
            myfont = p5.loadFont("/fonts/styro.otf");
            fontData = p5.loadBytes("/fonts/styro.ttf");
        };
        p5.setup = () => {
            width = container.clientWidth;
            height = container.clientHeight;
            minsize = Math.min(width, height);
            p5.createCanvas(width, height);
            pg = p5.createGraphics(PARAMS.diameter, PARAMS.diameter);
            container.style.opacity = "1";
            font = opentype.parse(fontData.bytes.buffer);
            path = font.getPath(PARAMS.string, 0, 0, height / 2);
            console.log(path);
            vectors = path.commands;
            // glyphs = font.stringToGlyphs(PARAMS.string);
            // console.log(glyphs)
        };

        p5.draw = () => {
            // BACKGROUND
            p5.background(0);
            pg.background(100);

            p5.push();
            p5.translate(100, height - 100);
            p5.beginShape();
            for (const c of vectors) {
                if (c.type === "M") {
                    p5.vertex(c.x, c.y);
                }
                if (c.type === "L") {
                    p5.vertex(c.x, c.y);
                }
                if (c.type === "Q") {
                    p5.vertex(c.x, c.y);
                }
                if (c.type === "Z") {
                    p5.endShape(p5.CLOSE);
                    p5.beginShape();
                }
            }
            p5.pop();

            if (p5.mouseIsPressed) {
                if (!startPressing) {
                    let vmouse = p5.createVector(p5.mouseX, p5.mouseY);
                    let involved = vectors.filter((v) => {
                        let vpoint = p5.createVector(
                            v.x + 100,
                            v.y + height - 100
                        );
                        return vpoint.dist(vmouse) < PARAMS.diameter / 2;
                    });
                    startPressing = involved;
                    startPressing.forEach((v) => {
                        v.startX = v.x;
                        v.startY = v.y;
                        v.lerpValue = 1;
                        v.lerp = false;
                    });
                    startCursor = {
                        x: p5.mouseX,
                        y: p5.mouseY,
                    };
                }
                p5.push();
                p5.noFill();
                p5.stroke("red");
                p5.circle(p5.mouseX, p5.mouseY, PARAMS.diameter);
                p5.pop();
                startPressing.forEach((v) => {
                    v.x += p5.mouseX - startCursor.x;
                    v.y += p5.mouseY - startCursor.y;
                });
                startCursor = {
                    x: p5.mouseX,
                    y: p5.mouseY,
                };
            }

            for (const v of vectorMovedList) {
                if (v.lerp) {
                    const xValue = p5.lerp(v.startX, v.x, v.lerpValue);
                    const yValue = p5.lerp(v.startY, v.y, v.lerpValue);
                    v.x = xValue;
                    v.y = yValue;
                    v.lerpValue -= 0.01;
                }
            }
        };
        p5.mouseReleased = () => {
            vectorMovedList = vectorMovedList.concat(startPressing)
            setTimeout(() => {
                vectorMovedList.forEach((v) => {
                        v.lerp = true
                    });
                }, 1000);
            startPressing = null;
        };
        p5.windowResized = () => {
            if (container.clientWidth !== width) p5.setup();
        };
    };
    new P5(sketch, container);
</script>
<div class="p5"></div>
