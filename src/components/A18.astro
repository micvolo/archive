<script>
    import P5 from "p5";
    import opentype from "opentype.js";
    import { Pane } from "tweakpane";

    const container = document.querySelector(".p5") as HTMLElement;
    const PARAMS = {
        rows: 10,
        cols: 10,
        noiseSpeed: 0.01,
        string: "CIAO",
        size: 600,
        mouseSize: 150,
        velocity: 0.01,
        delay: 0,
        keep: true,
        copyEverything: false,
        return: true,
        fps: 60,
        stroke: false,
        strokeWeight: 1,
        bgcolor: "#000000",
        textcolor: "#FFFFFF",
        strokecolor: "#000000",
    };

    const pane = new Pane({
        title: "Parameters",
        expanded: false,
    });
    pane.addBinding(PARAMS, "string");
    pane.addBinding(PARAMS, "size", { min: 0, max: 1000 });
    pane.addBinding(PARAMS, "mouseSize", { min: 0, max: 2000 });
    pane.addBinding(PARAMS, "velocity", { min: 0.001, max: 0.1 });
    pane.addBinding(PARAMS, "delay", { min: 0, max: 3 });
    pane.addBinding(PARAMS, "copyEverything");
    pane.addBinding(PARAMS, "return");
    pane.addBinding(PARAMS, "keep");
    pane.addBinding(PARAMS, "stroke");
    pane.addBinding(PARAMS, "strokeWeight", { min: 0, max: 10 });
    pane.addBinding(PARAMS, "bgcolor");
    pane.addBinding(PARAMS, "textcolor");
    pane.addBinding(PARAMS, "strokecolor");
    pane.addBinding(PARAMS, "rows", { min: 1, max: 1000 });
    pane.addBinding(PARAMS, "cols", { min: 1, max: 1000 });
    pane.addBinding(PARAMS, "noiseSpeed", { min: 0.001, max: 0.1 });
    pane.addBinding(PARAMS, "fps", {
        view: "graph",
        min: 0,
        max: 100,
    });

    let file = null;

    const sketch = (p5: P5) => {
        let width,
            height,
            pg,
            pg2,
            fontData,
            font,
            paths,
            textW,
            textH = 0,
            traslate,
            grid = {
                minx: 100,
                maxx: 0,
                miny: 100,
                maxy: 0,
            };

        p5.preload = () => {
            fontData = p5.loadBytes("/fonts/thunder.ttf");
        };

        p5.setup = async () => {
            width = container.clientWidth;
            height = container.clientHeight;
            p5.createCanvas(width, height);
            pg = p5.createGraphics(width, height);
            container.style.opacity = "1";

            font = opentype.parse(fontData.bytes.buffer);
            paths = font.getPaths(PARAMS.string, 0, 0, PARAMS.size);
            textW = font.getAdvanceWidth(PARAMS.string, PARAMS.size);
            textH = 0;
            for (const path of paths) {
                const h = Math.abs(
                    path.getBoundingBox().y1 - path.getBoundingBox().y2,
                );
                if (h > textH) textH = h;
                for (const c of path.commands) {
                    if (c.x && c.y) {
                        c.i = +(c.x / 100).toFixed();
                        c.j = +(c.y / 100).toFixed();
                        if (c.i < grid.minx) grid.minx = c.i;
                        if (c.i > grid.maxx) grid.maxx = c.i;
                        if (c.j < grid.miny) grid.miny = c.j;
                        if (c.j > grid.maxy) grid.maxy = c.j;
                    }
                }
            }
            console.log(grid);
            traslate = {
                x: (width - textW) / 2,
                y: (height - textH) / 2 + textH,
            };
        };

        p5.draw = () => {
            PARAMS.fps = p5.frameRate();
            p5.background(PARAMS.bgcolor);

            pg.push();
            pg.translate(traslate.x, traslate.y);
            for (const path of paths) {
                pg.beginShape();
                let shapes = 0;
                for (const c of path.commands) {
                    let noise =
                        (p5.noise(c.i, c.j, p5.frameCount * 0.01) - 0.5) * 0.5;
                    if (noise) {
                        c.x += noise;
                        c.x1 += noise;
                        c.x2 += noise;
                        // c.y += noise
                    }
                    switch (c.type) {
                        case "M":
                            if (shapes > 0) {
                                pg.beginContour();
                            }
                            pg.vertex(c.x, c.y);
                            break;
                        case "Z":
                            if (shapes > 0) {
                                pg.endContour();
                            }
                            shapes++;
                            break;
                        case "L":
                            pg.vertex(c.x, c.y);
                            break;
                        case "Q":
                            pg.quadraticVertex(c.x1, c.y1, c.x, c.y);
                            break;
                        case "C":
                            pg.bezierVertex(c.x1, c.y1, c.x2, c.y2, c.x, c.y);
                            break;
                    }
                }
                pg.endShape();
            }
            pg.stroke("red");
            for (let i = 0; i < grid.maxx + 1; i++) {
                let noise = p5.noise(i, p5.frameCount * 0.01) * 100;
                let v = (i * textW) / grid.maxx + noise;
                pg.line(v, 0, v, -textH);
            }
            for (let i = 0; i < grid.maxy + 1; i++) {
                pg.line(
                    0,
                    (i * textH) / grid.maxy,
                    textW,
                    (i * textH) / grid.maxy,
                );
            }
            pg.strokeWeight(0);
            pg.pop();
            p5.image(pg, 0, 0);
        };
        p5.windowResized = () => {
            if (container.clientWidth !== width) p5.setup();
        };
        pane.on("change", (c) => {
            const dontRefresh = [
                "keep",
                "bgcolor",
                "textcolor",
                "strokecolor",
                "strokeWeight",
                "mouseSize",
                "velocity",
                "delay",
                "copyEverything",
                "return",
                "stroke",
            ];
            if (dontRefresh.includes(c.presetKey)) {
                return;
            }
            p5.setup();
        });
    };
    new P5(sketch, container);
</script>
<div class="p5"></div>
